// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.30.2
// source: download.proto

package download

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DownloadServiceClient is the client API for DownloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DownloadServiceClient interface {
	PreDownload(ctx context.Context, in *DownloadTask, opts ...grpc.CallOption) (*DownloadSummary, error)
	Download(ctx context.Context, opts ...grpc.CallOption) (DownloadService_DownloadClient, error)
}

type downloadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadServiceClient(cc grpc.ClientConnInterface) DownloadServiceClient {
	return &downloadServiceClient{cc}
}

func (c *downloadServiceClient) PreDownload(ctx context.Context, in *DownloadTask, opts ...grpc.CallOption) (*DownloadSummary, error) {
	out := new(DownloadSummary)
	err := c.cc.Invoke(ctx, "/DownloadService/PreDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadServiceClient) Download(ctx context.Context, opts ...grpc.CallOption) (DownloadService_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &DownloadService_ServiceDesc.Streams[0], "/DownloadService/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &downloadServiceDownloadClient{stream}
	return x, nil
}

type DownloadService_DownloadClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*DownloadStatus, error)
	grpc.ClientStream
}

type downloadServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *downloadServiceDownloadClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *downloadServiceDownloadClient) CloseAndRecv() (*DownloadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DownloadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DownloadServiceServer is the server API for DownloadService service.
// All implementations must embed UnimplementedDownloadServiceServer
// for forward compatibility
type DownloadServiceServer interface {
	PreDownload(context.Context, *DownloadTask) (*DownloadSummary, error)
	Download(DownloadService_DownloadServer) error
	mustEmbedUnimplementedDownloadServiceServer()
}

// UnimplementedDownloadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDownloadServiceServer struct {
}

func (UnimplementedDownloadServiceServer) PreDownload(context.Context, *DownloadTask) (*DownloadSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreDownload not implemented")
}
func (UnimplementedDownloadServiceServer) Download(DownloadService_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedDownloadServiceServer) mustEmbedUnimplementedDownloadServiceServer() {}

// UnsafeDownloadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadServiceServer will
// result in compilation errors.
type UnsafeDownloadServiceServer interface {
	mustEmbedUnimplementedDownloadServiceServer()
}

func RegisterDownloadServiceServer(s grpc.ServiceRegistrar, srv DownloadServiceServer) {
	s.RegisterService(&DownloadService_ServiceDesc, srv)
}

func _DownloadService_PreDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).PreDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DownloadService/PreDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).PreDownload(ctx, req.(*DownloadTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DownloadServiceServer).Download(&downloadServiceDownloadServer{stream})
}

type DownloadService_DownloadServer interface {
	SendAndClose(*DownloadStatus) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type downloadServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *downloadServiceDownloadServer) SendAndClose(m *DownloadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *downloadServiceDownloadServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DownloadService_ServiceDesc is the grpc.ServiceDesc for DownloadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DownloadService",
	HandlerType: (*DownloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PreDownload",
			Handler:    _DownloadService_PreDownload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _DownloadService_Download_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "download.proto",
}
