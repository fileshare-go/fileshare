# .github/workflows/build-wails.yml

name: Build Wails App

on:
  push:
    branches:
      - master # Trigger on pushes to the main branch
  pull_request:
    branches:
      - master # Trigger on pull requests targeting the main branch

jobs:
  build:
    runs-on: ${{ matrix.os }} # Run jobs on different operating systems
    strategy:
      # Fail-fast: false means that if one build fails, others will continue
      # This is useful if you want to see all build results, not just the first failure.
      fail-fast: false
      matrix:
        # Define the operating systems and platforms to build for
        include:
          - os: ubuntu-latest
            platform: linux/amd64
            # Dependencies for Linux, based on Wails documentation
            linux_deps: >
              libgtk-3-dev
              libwebkit2gtk-4.0-dev
              libappindicator3-dev
              librsvg2-dev
              patchelf
          - os: windows-latest
            platform: windows/amd64
            # Windows runners usually have MSVC, but Wails often needs GCC for CGo.
            # We'll use the setup-msys2 action to get MinGW-w64 (GCC).
            # Note: For Windows cross-compilation from Linux, you'd set CC/CXX env vars
            # However, here we're building directly on a Windows runner.

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22" # Use a recent Go version

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Use a recent LTS Node.js version
          cache: "npm" # Cache npm dependencies

      # Install Linux build dependencies
      - name: Install Linux Dependencies
        if: startsWith(matrix.os, 'ubuntu') # Only run on Ubuntu runners
        run: |
          sudo apt update
          sudo apt install -y ${{ matrix.linux_deps }}

      # Set up MinGW-w64 (GCC) on Windows
      - name: Set up MSYS2 (MinGW-w64 for GCC)
        if: startsWith(matrix.os, 'windows') # Only run on Windows runners
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64 # Use the UCRT64 environment for modern Windows compatibility
          install: mingw-w64-ucrt-x86_64-gcc # Install the GCC toolchain
          # This action ensures GCC is in PATH for the subsequent build steps.

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install Frontend Dependencies
        # Assuming your frontend is in a 'frontend' directory relative to the project root
        working-directory: ./frontend
        run: npm install # Or yarn install / pnpm install

      - name: Build Wails Application for ${{ matrix.platform }}
        # The `wails build` command automatically handles the frontend build and embedding.
        # It detects the current OS and architecture for the target platform.
        run: wails build -platform ${{ matrix.platform }}
        # If you need to sign your application, you would add steps here
        # using secrets for certificates. Example:
        # if: startsWith(matrix.os, 'windows') # For Windows signing
        #   run: |
        #     # ... code to decode cert from secret and run signtool.exe
        # For more complex builds (e.g., installers), you might use `wails build -p`.

      - name: Upload Artifacts (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-artifact@v4
        with:
          name: wails-app-linux-${{ github.sha }}
          path: ./build/bin/* # Path to your compiled binary on Linux

      - name: Upload Artifacts (Windows)
        if: startsWith(matrix.os, 'windows')
        uses: actions/upload-artifact@v4
        with:
          name: wails-app-windows-${{ github.sha }}
          path: ./build/bin/* # Path to your compiled binary on Windows
